---
title: "aula_01/08"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Trajetoria

```{r}
library(tseries)

# Datas de início e fim
dataini <- as.Date("2025-04-01")
datafim <- as.Date("2025-06-28")

# Baixando os dados dos 5 ativos
lwsa3  <- get.hist.quote("lwsa3.sa",  quote = "Close", start = dataini, end = datafim)
elet6 <- get.hist.quote("elet6.sa",  quote = "Close", start = dataini, end = datafim)
itsa4  <- get.hist.quote("itsa4.sa",  quote = "Close", start = dataini, end = datafim)
rent3  <- get.hist.quote("rent3.sa",  quote = "Close", start = dataini, end = datafim)
brfs3  <- get.hist.quote("brfs3.sa",  quote = "Close", start = dataini, end = datafim)

# Removendo valores ausentes
lwsa3 <- na.omit(lwsa3)
elet6 <- na.omit(elet6)
itsa4 <- na.omit(itsa4)
rent3 <- na.omit(rent3)
brfs3 <- na.omit(brfs3)

# Verificando quantidade de observações e visualizando os dados
length(lwsa3); plot(lwsa3, main = "Ativo - LWSA3")
length(elet6); plot(elet6, main = "Ativo - ELET6")
length(itsa4); plot(itsa4, main = "Ativo - ITSA4")
length(rent3); plot(rent3, main = "Ativo - RET3")
length(brfs3); plot(brfs3, main = "Ativo - BRFS3")
```

## Princípios da Diversificação

```{r}
library(tseries)

# Datas de início e fim
dataini <- as.Date("2025-04-01")
datafim <- as.Date("2025-06-28")

# Vetor com os tickers
tickers <- c("lwsa3.sa", "elet6.sa", "itsa4.sa", "rent3.sa", "brfs3.sa")

# Lista para armazenar os preços históricos
precos <- list()

# Baixando os dados e removendo NAs
for (ticker in tickers) {
  serie <- get.hist.quote(ticker, quote = "Close", start = dataini, end = datafim)
  serie <- na.omit(serie)
  precos[[ticker]] <- serie
}

# Função para calcular média e desvio padrão
estatisticas <- lapply(precos, function(x) {
  c(Media = mean(x), DesvioPadrao = sd(x))
})

# Exibindo resultados
estatisticas

```

```{r}
library(tseries)

# Datas de início e fim
dataini <- as.Date("2025-04-01")
datafim <- as.Date("2025-06-28")

# Lista de ativos
tickers <- c("lwsa3.sa", "elet6.sa", "itsa4.sa", "rent3.sa", "brfs3.sa")

# Baixar os preços
precos <- list()
for (ticker in tickers) {
  serie <- get.hist.quote(ticker, quote = "Close", start = dataini, end = datafim)
  precos[[ticker]] <- na.omit(serie)
}

# Calcular retornos logarítmicos
retornos <- lapply(precos, function(x) na.omit(diff(log(x))))

# Plotar gráficos para cada ativo
for (ticker in tickers) {
  # Abrir nova janela de gráfico (se estiver usando RStudio ou R GUI)
  # windows()  # use no Windows / R GUI
  # quartz()   # use no MacOS
  # x11()      # use no Linux
  
  # Ajustar layout da janela de gráficos
  par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))  # 2 linhas, 2 colunas

  # Série de preços
  plot(precos[[ticker]], main = paste("Série de Preços -", toupper(ticker)),
       col = "darkgreen", ylab = "Preço", xlab = "Data")

  # Histograma dos preços
  hist(precos[[ticker]], breaks = 30, col = "skyblue",
       main = paste("Histograma dos Preços -", toupper(ticker)),
       xlab = "Preço")

  # Série de retornos
  plot(retornos[[ticker]], main = paste("Retornos -", toupper(ticker)),
       col = "purple", ylab = "Retorno", xlab = "Data")

  # Histograma dos retornos
  hist(retornos[[ticker]], breaks = 30, col = "lightcoral",
       main = paste("Histograma dos Retornos -", toupper(ticker)),
       xlab = "Retorno")

  # Pausar para visualizar (opcional)
  readline(prompt = "Pressione [Enter] para continuar para o próximo ativo...")
}


```

```{r}
# Juntar os retornos em um data.frame
Correl <- cbind.data.frame(lwsa3, elet6, itsa4, rent3, brfs3)
names(Correl) <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")

# Visualizar a classe
class(Correl)  # Deve ser "data.frame"

# --- Cálculo da correlação entre duas variáveis específicas (opcional) ---
# Pearson: Variáveis Numéricas e Paramétricas
# Instale se necessário: install.packages("fBasics")
library(fBasics)

# Teste de correlação entre duas variáveis (ex: lwsa3 e brfs3)
Corr01 <- correlationTest(Correl$lwsa3, Correl$brfs3, method = "pearson")
print(Corr01)

# --- Matriz de correlação completa ---
matriz_cor <- cor(Correl, method = "pearson")
print(matriz_cor)

# --- Visualização gráfica da correlação entre dois ativos ---
plot(Correl$rent3, Correl$brfs3,
     main = "Correlação RENT3 x BRFS3",
     xlab = "RENT3", ylab = "BRFS3",
     col = "blue", pch = 16)

abline(lm(Correl$brfs3 ~ Correl$rent3), col = "red", lwd = 2)

# --- Visualização da matriz de correlação como um mapa de calor ---
# Instale se necessário: install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
corrplot(matriz_cor, method = "color", addCoef.col = "black")

```

```{r}
Basico<-data.frame(na.omit(merge(lwsa3,elet6,itsa4,rent3,brfs3)));Basico
names(Basico)<-c("lwsa3", "elet6", "itsa4", "rent3", "brfs3");Basico;length(itsa4)
write.table(Basico,file="Basico.txt")

dados<-read.table("Basico.txt", head=T);dados
dados <- timeSeries(dados)
dados

Retornos<-returns(dados);Retornos
View(data.frame(Retornos))


#install.packages("fPortfolio")
library(fPortfolio)
library(timeSeries)

# Suponha que Retornos seja uma matriz/data.frame de retornos com datas
Retornos <- as.timeSeries(Retornos)

# Criar especificação
espec <- portfolioSpec()

# Calcular a fronteira eficiente
fronteira <- portfolioFrontier(Retornos, spec = espec)

# Plotar a fronteira
frontierPlot(fronteira, auto = FALSE)

# Adicionar pontos manuais à fronteira
points(0.0365, -0.0027, pch = 19, cex = 1.5, col = "green")
points(0.0203, -0.0002, pch = 19, cex = 1.5, col = "green")
points(0.0144,  0.0049, pch = 19, cex = 1.5, col = "green")
points(0.0237,  0.0074, pch = 19, cex = 1.5, col = "red")

```

## Gráfico de Pizza Mínima variância

```{r}
MinimaVariancia<-minvariancePortfolio(Retornos)
PesosMinimos<-getWeights(MinimaVariancia);PesosMinimos
RetornoCalculado<-getTargetReturn(MinimaVariancia);RetornoCalculado
RiscoMinimo<-getTargetRisk(MinimaVariancia);RiscoMinimo
points(0.01183586 ,0.002906674,pch=19, cex=1.5, col="blue")


GraficoPizza<-weightsPie(MinimaVariancia);GraficoPizza

```

```{r}
# Carregar bibliotecas
library(fPortfolio)

# Calcular a carteira de mínima variância
MinimaVariancia <- minvariancePortfolio(Retornos)
PesosMinimos <- getWeights(MinimaVariancia)
RetornoCalculado <- getTargetReturn(MinimaVariancia)
RiscoMinimo <- getTargetRisk(MinimaVariancia)

# Gerar a fronteira
fronteira <- portfolioFrontier(Retornos)

# Plotar a fronteira primeiro!
frontierPlot(fronteira, auto = FALSE)

# Agora sim, adicionar o ponto da carteira de mínima variância
points(RiscoMinimo, RetornoCalculado, pch = 19, cex = 1.5, col = "blue")

# Gráfico de pizza com pesos
weightsPie(MinimaVariancia)

```
