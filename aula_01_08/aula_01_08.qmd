---
title: "aula_01/08"
format: html
editor: visual
editor_options: 
  chunk_output_type: console
---

## Trajetoria

```{r}
library(tseries)
library(xts)
library(zoo)

plot_inicial_final <- function(serie, nome) {
  datas <- index(serie)
  preco <- coredata(serie)
  
  # Ponto inicial e final
  data_ini <- datas[1]
  preco_ini <- preco[1]
  data_fim <- datas[length(datas)]
  preco_fim <- preco[length(preco)]
  
  plot(serie, main = paste("Preço de fechamento -", nome), col = "blue")
  points(data_ini, preco_ini, col = "green", pch = 19, cex = 1.5)
  points(data_fim, preco_fim, col = "red", pch = 19, cex = 1.5)
  
  # Linha ligando primeiro e último
  lines(c(data_ini, data_fim), c(preco_ini, preco_fim), col = "black", lwd = 2, lty = 2)
  
  legend("topright", legend = c("Primeiro dia", "Último dia"),
         col = c("green", "red", "black"), pch = c(19, 19, NA), lty = c(NA, NA, 2), bty = "n")
}

# Aplicando para os ativos
plot_inicial_final(lwsa3, "LWSA3")
plot_inicial_final(elet6, "ELET6")
plot_inicial_final(itsa4, "ITSA4")
plot_inicial_final(rent3, "RENT3")
plot_inicial_final(brfs3, "BRFS3")

```

## Princípios da Diversificação

```{r}
Correl=cbind(lwsa3, elet6, itsa4, rent3, brfs3);Correl
names(Correl)<-c("lwsa3", "elet6", "itsa4", "rent3", "brfs3"); class(Correl)
#Transformar a tabela em Data.frame para Aplicar a CORREL
Correl=cbind.data.frame(lwsa3, elet6, itsa4, rent3, brfs3);     names(Correl) <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3");Correl
attach(Correl)
class(Correl)

#Cáculo do Coeficiente de Correlação 
# Pearson: Variáveis Numéricas e Paramétricas)
library(fBasics)
Corr01=correlationTest(lwsa3, elet6, method=c("pearson"));Corr01
par=mflow=c(1,1)
plot(lwsa3, elet6 , main="Correlação Xi,Xj")
abline(lm(lwsa3~elet6), col="red", lwd=3)

#Matriz de correlação (5 Ativos)
cor(Correl)
```

```{r}
# Juntar os retornos em um data.frame
Correl <- cbind.data.frame(lwsa3, elet6, itsa4, rent3, brfs3)
names(Correl) <- c("lwsa3", "elet6", "itsa4", "rent3", "brfs3")

# Visualizar a classe
class(Correl)  # Deve ser "data.frame"

# --- Cálculo da correlação entre duas variáveis específicas (opcional) ---
# Pearson: Variáveis Numéricas e Paramétricas
# Instale se necessário: install.packages("fBasics")
library(fBasics)

# Teste de correlação entre duas variáveis (ex: lwsa3 e brfs3)
Corr01 <- correlationTest(Correl$lwsa3, Correl$brfs3, method = "pearson")
print(Corr01)

# --- Matriz de correlação completa ---
matriz_cor <- cor(Correl, method = "pearson")
print(matriz_cor)

# --- Visualização gráfica da correlação entre dois ativos ---
plot(Correl$rent3, Correl$brfs3,
     main = "Correlação RENT3 x BRFS3",
     xlab = "RENT3", ylab = "BRFS3",
     col = "blue", pch = 16)

abline(lm(Correl$brfs3 ~ Correl$rent3), col = "red", lwd = 2)

# --- Visualização da matriz de correlação como um mapa de calor ---
# Instale se necessário: install.packages("corrplot")
install.packages("corrplot")
library(corrplot)
corrplot(matriz_cor, method = "color", addCoef.col = "black")
```

# Princípio da Otimização: 

### Cálculos do Retornos(logn):

```{r}
Basico<-data.frame(na.omit(merge(lwsa3, elet6, itsa4, rent3, brfs3)));Basico
names(Basico)<-c("lwsa3", "elet6", "itsa4", "rent3", "brfs3");Basico;length(brfs3)
write.table(Basico,file="Basico.txt")

dados<-read.table("Basico.txt", head=T);dados
dados <- timeSeries(dados)
dados

Retornos<-returns(dados);Retornos
View(data.frame(Retornos))
require(fPortfolio)

fronteira<-portfolioFrontier(Retornos);fronteira
frontierPlot(fronteira, auto=F)
points(0.0365,-0.0027,pch=19, cex=1.5, col="green")
points(0.0203,-0.0002,pch=19, cex=1.5, col="green")
points(0.0144,0.0049 ,pch=19, cex=1.5, col="green")
points(0.0237,0.0074,pch=19, cex=1.5, col="red")
```

### Carteira Sem Restrições de Retorno:

```{r}
MinimaVariancia<-minvariancePortfolio(Retornos)
PesosMinimos<-getWeights(MinimaVariancia);PesosMinimos
RetornoCalculado<-getTargetReturn(MinimaVariancia);RetornoCalculado
RiscoMinimo<-getTargetRisk(MinimaVariancia);RiscoMinimo
points(0.01183586 ,0.002906674,pch=19, cex=1.5, col="blue")

GraficoPizza<-weightsPie(MinimaVariancia);GraficoPizza
```

### Carteira ótima:

```{r}

CarteiraCustom<-portfolioSpec(portfolio=list(
    weights=NULL,targetReturn=0.005, 
    targetRisk=NULL, riskFreeRate=0.0553131,nFrontierPoints=50))
  CarteiraCustom
  
  CarteiraCustomizada<-efficientPortfolio(Retornos, spec=CarteiraCustom)
  CarteiraCustomizada
  
  getWeights(CarteiraCustomizada)
  getTargetReturn(CarteiraCustomizada)
  getTargetRisk(CarteiraCustomizada)
  frontierPlot(portfolioFrontier(Retornos))
  points(frontierPoints(CarteiraCustomizada)[,1], frontierPoints(CarteiraCustomizada)[,2], col="blue", pch=17, cex=1.5)
  
  singleAssetPoints(fronteira, col="pink", pch=19)
  tangencyLines(fronteira, col="green", pch=19)
  sharpeRatioLines(fronteira, col="red")
  tailoredFrontierPlot(portfolioFrontier(Retornos))
  
  GraficoPizzaCustom<-weightsPie(CarteiraCustomizada);GraficoPizzaCustom
```

### Carteira com Retorno Cartelado

```{r}

CarteiraCustom<-portfolioSpec(portfolio=list(
        weights=NULL,targetReturn=0.006, 
        targetRisk=NULL, riskFreeRate=0.0,nFrontierPoints=50))
CarteiraCustom


CarteiraCustomizada<-efficientPortfolio(Retornos, spec=CarteiraCustom)
CarteiraCustomizada

getWeights(CarteiraCustomizada)
getTargetReturn(CarteiraCustomizada)
getTargetRisk(CarteiraCustomizada)
frontierPlot(portfolioFrontier(Retornos))
points(frontierPoints(CarteiraCustomizada)[,1], frontierPoints(CarteiraCustomizada)[,2], col="blue", pch=17, cex=1.5)

singleAssetPoints(fronteira, col="pink", pch=19)
tangencyLines(fronteira, col="green", pch=19)

GraficoPizzaCustom<-weightsPie(CarteiraCustomizada);GraficoPizzaCustom


```

### Carteira com Ativo Livre de risco

```{r}

```
